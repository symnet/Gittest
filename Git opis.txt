dowolny folder
GIT INIT - za³o¿enie lokalnego repozytorium
Git status 
- ga³¹Ÿ
- jakie pliki œledzimy
- commit (komentarz co œledzimy) - zatwierdzenie zmiany w plikach
Git œledzi zmiany jakie wprowadzamy do projektu i zatwierdzamy tzw. commit (punkt w czasie) - zapis stanu wszystkich œledzonych
plików.... mo¿na to cofaæ.

Ka¿dy commit musi posiadaæ swojego autora - u¿ytkownik, email (globalnie lub lokalnie).
Nale¿y zdefiniowaæ usera i email

git config --global user.name "rafpyt"
git config --global user.email "rafpyt@vp.pl"

git add * - git bêdzie œledzi³ wszystkie pliki prokektu - mo¿na poprzedziæ i po u¿yæ git status

pliki czekaj¹ w poczekalni a¿ wykonamy commit tj. a¿ je zatwierdzimy


commit podajemy wraz z opcj¹ - komentarzem co zmieniamy
MUSIMY NAJPIERW DODAÆ DO POCZEKALNI, A DOPIERO POTEM DODAÆ COMMIT
git commit -m "Pierwszy commit"
git commit -a - DODANIE AUTOMATYCZNE ZMIAN
Najczêœciej spotykan¹ kombinacj¹ opcji jest
git commit -a -m "opis zmian"


Repozytorium mo¿na sklonowaæ zgithub do lokalnego foldera
git clone i WWW-adres
œci¹gniête repozytorium bêdzie w podfolderze o nazwie repozytorium
Repozytorium zdalne jest kopi¹ zabezpieczeniow¹ - jak siê utraci lokalnie to mo¿na przywróciæ

zmiany mo¿na wprowadzaæ lokalnie i zatwierdzaæ je commit a nastêpnie wypycha siê je do zew.

Jeœli mamy ju¿ pliki w nowym repozytorium na dysku lokalnym robimy wszystko podobnie jak wczeœniej
DODAJEMY JE DO POCZEKALNI
git add *

ZATWIERDZAMY COMMIETM
git commit -m "wypychamy na github"
a robimy to poleceniem:
git push [remote="zdalne repozytori dostêpne pod adresem http://"] [jak ga³¹Ÿ]
git push origin master
ZMIANY Z LOKALNEGO REPOZYTORIUM ZOSTAJ¥ WEPCHNIÊTE DO ZDALNEGO

JAK u¿ywamy ga³êzi??????????????????
Mater to g³ówna ga³¹Ÿ
w praktyce nie pracujemy na ga³êzi mater, zmiany wprowadzamy do kolejnych ga³êzi, master jest wzorcem kodu.
Potem te dodatkowe ga³êzie mo¿emy scaliæ na z projektem.
Ka¿dy deweloper pracyjne na innej ga³êzi
Ga³¹Ÿ mo¿e dzieliæ siê na mniejsze ga³êzie

ROZPOCZYNAMY od zdefiniowania nowej ga³êzi np. DEWELOPER
git checkout -b developer [ b to skrót od branch tj. ga³¹Ÿ] - ustawiamy now¹ ga³¹Ÿ deweloper
nastêpnie wszystko dodajemy 
git add *
git status
git commit -m "nazwa modyfikacji" 
i gotowe - zmiany na ga³êzi deweloper zosta³y wprowadzone
Podsumowj¹ce: zmiana, dodajemy, dajemy commit i jest zmiana

Scalanie z ga³êzi¹ master PULL REQEST - proœba do w³aœciciela-organizatora repozytorium \ projektu o zaakceptowanie zmian
- on wykonuje tzw. merge.
(zmiany by³y tylko na ga³êzi deweloper)
Teraz developer jest bardziej aktualny ni¿ master, wiec musimy je spowrotem scaliæ menad¿er (zdalnie).
Trzeba na githaba wepchn¹æ zmiany wys³aæ tzw. pull request do mastera - scaliæ ga³êzie. Wepchn¹æ ga³¹Ÿ dewelop (pull), aby w³aœciciel master dokona³ oceny i ew. scalenia
Scalanie przeprowadzamy zdanie na githabie
git push origin developer 
- wypychamy ga³¹Ÿ develper do mastera

